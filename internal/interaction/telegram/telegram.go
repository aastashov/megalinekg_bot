package telegram

import (
	"context"
	"fmt"
	"log/slog"
	"strings"

	telegramBot "github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"

	"github.com/aastashov/megalinekg_bot/internal/model"
)

type useCase interface {
	UpdateBalance(ctx context.Context, userID int64) error
}

type userStorage interface {
	GetOrCreateByTelegramID(ctx context.Context, userID int64) (*model.User, bool, error)
	Save(ctx context.Context, user *model.User) error
	DeleteByTelegramID(ctx context.Context, userID int64) error
}

type Connector struct {
	logger *slog.Logger
	tgBot  *telegramBot.Bot

	userStorage userStorage
	useCase     useCase

	waitingForLogin map[int64]struct{}
}

func NewConnector(logger *slog.Logger, token string, userStorage userStorage, useCase useCase) *Connector {
	cnt := &Connector{
		logger:          logger.With("component", "telegram"),
		userStorage:     userStorage,
		useCase:         useCase,
		waitingForLogin: make(map[int64]struct{}),
	}

	opts := []telegramBot.Option{
		telegramBot.WithSkipGetMe(),
		telegramBot.WithDefaultHandler(cnt.handler),
	}

	b, _ := telegramBot.New(token, opts...)
	b.RegisterHandler(telegramBot.HandlerTypeMessageText, "/start", telegramBot.MatchTypeExact, cnt.handlerStart)
	b.RegisterHandler(telegramBot.HandlerTypeMessageText, "/about", telegramBot.MatchTypeExact, cnt.handlerAbout)
	b.RegisterHandler(telegramBot.HandlerTypeMessageText, "/delete", telegramBot.MatchTypeExact, cnt.handlerDelete)
	b.RegisterHandler(telegramBot.HandlerTypeMessageText, "/save", telegramBot.MatchTypeExact, cnt.handlerSave)
	b.RegisterHandler(telegramBot.HandlerTypeMessageText, "/balance", telegramBot.MatchTypeExact, cnt.handlerBalance)

	cnt.tgBot = b
	return cnt
}

func (that *Connector) Start(ctx context.Context) {
	that.tgBot.Start(ctx)
}

func (that *Connector) handlerStart(ctx context.Context, bot *telegramBot.Bot, update *models.Update) {
	log := that.logger.With("method", "handlerStart", "user_id", update.Message.From.ID)

	_, created, err := that.userStorage.GetOrCreateByTelegramID(ctx, update.Message.From.ID)
	if err != nil {
		log.Error("Error getting or creating user", "error", err)
		return
	}

	message := "–ö–∞–∂–µ—Ç—Å—è –º—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã. –ù–∞–ø–∏—à–∏—Ç–µ /about —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ."
	if created {
		// If user was created, we should send welcome message
		message = "–ü—Ä–∏–≤–µ—Ç. –Ø –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç MegaLineBalanceBot –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∫–æ–º–∞–Ω–¥—ã /about."
	}

	_, err = bot.SendMessage(ctx, &telegramBot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   message,
	})

	if err != nil {
		log.Error("Error sending message", "error", err)
		return
	}
}

func (that *Connector) handlerAbout(ctx context.Context, bot *telegramBot.Bot, update *models.Update) {
	log := that.logger.With("method", "handlerAbout", "user_id", update.Message.From.ID)

	const aboutMessage = `*MegaLineBalanceBot* \- –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ MegaLine\.

‚ú® –Ø —É–≤–∞–∂–∞—é –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –±–∞–ª–∞–Ω—Å–µ\.
üõ°Ô∏è –•—Ä–∞–Ω—é —Ç–æ–ª—å–∫–æ —Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã, –∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ\.
üíª –ú–æ–π –∫–æ–¥ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub: [GitHub](https://github\.com/aastashov/megalinekg_bot)\.
üßπ –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \/delete ‚Äî –≤—Å—ë —É–¥–∞–ª–∏—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é\.

üì• –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \/save\. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\.

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –º–Ω–µ\! üòä`

	disabled := true
	_, err := bot.SendMessage(ctx, &telegramBot.SendMessageParams{
		ChatID:             update.Message.Chat.ID,
		Text:               aboutMessage,
		ParseMode:          models.ParseModeMarkdown,
		LinkPreviewOptions: &models.LinkPreviewOptions{IsDisabled: &disabled},
	})

	if err != nil {
		log.Error("Error sending message", "error", err)
		return
	}
}

func (that *Connector) handlerDelete(ctx context.Context, bot *telegramBot.Bot, update *models.Update) {
	log := that.logger.With("method", "handlerDelete", "user_id", update.Message.From.ID)

	responseText := "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start."

	if err := that.userStorage.DeleteByTelegramID(ctx, update.Message.From.ID); err != nil {
		log.Error("Error deleting user", "error", err)
		responseText = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
	}

	_, err := bot.SendMessage(ctx, &telegramBot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   responseText,
	})

	if err != nil {
		log.Error("Error sending message", "error", err, "response_text", responseText)
		return
	}
}

func (that *Connector) handlerSave(ctx context.Context, bot *telegramBot.Bot, update *models.Update) {
	log := that.logger.With("method", "handlerSave", "user_id", update.Message.From.ID)

	_, err := bot.SendMessage(ctx, &telegramBot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
	})

	if err != nil {
		log.Error("Error sending message", "error", err)
		return
	}

	// Set user as waiting for login
	that.waitingForLogin[update.Message.From.ID] = struct{}{}
}

func (that *Connector) handlerBalance(ctx context.Context, bot *telegramBot.Bot, update *models.Update) {
	log := that.logger.With("method", "handlerBalance", "user_id", update.Message.From.ID)

	if err := that.useCase.UpdateBalance(ctx, update.Message.From.ID); err != nil {
		_, err = bot.SendMessage(ctx, &telegramBot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		})

		if err != nil {
			log.Error("Error sending message", "error", err)
			return
		}

		return
	}

	user, _, err := that.userStorage.GetOrCreateByTelegramID(ctx, update.Message.From.ID)
	if err != nil {
		log.Error("Error getting or creating user", "error", err)
		return
	}

	message := "*–í–∞—à –∞–∫–∫–∞—É–Ω—Ç MegaLine:*"
	if len(user.Accounts) > 1 {
		message = "*–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã MegaLine:*"
	}

	sep := "\n\n"
	const template = "%süì± *–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞*: %s\nüí∞ *–ë–∞–ª–∞–Ω—Å*: %v KGS\nüìÖ *–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã*: %s\nüí≥ *–°—É–º–º–∞ —Ç–∞—Ä–∏—Ñ–∞*: %d KGS"

	for _, account := range user.Accounts {
		message += fmt.Sprintf(template, sep, account.Number, account.Balance, account.BillingTo.Format("02\\-01\\-2006"), account.TariffAmount)
	}

	message = strings.ReplaceAll(message, ".", "\\.")

	_, err = bot.SendMessage(ctx, &telegramBot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      message,
		ParseMode: models.ParseModeMarkdown,
	})

	if err != nil {
		log.Error("Error sending message", "error", err)
		return
	}
}

func (that *Connector) handler(ctx context.Context, bot *telegramBot.Bot, update *models.Update) {
	log := that.logger.With("method", "handler", "user_id", update.Message.From.ID)
	log.Info("Handling message", "text", update.Message.Text)

	if _, ok := that.waitingForLogin[update.Message.From.ID]; ok {
		that.handleWaitingForLogin(ctx, bot, update)
		return
	}
}

func (that *Connector) handleWaitingForLogin(ctx context.Context, bot *telegramBot.Bot, update *models.Update) {
	log := that.logger.With("method", "handleWaitingForLogin", "user_id", update.Message.From.ID)

	// Handle login
	delete(that.waitingForLogin, update.Message.From.ID)

	login, password := "", ""
	// Parse login and password
	parts := strings.Split(strings.TrimSpace(update.Message.Text), " ")
	if len(parts) == 2 {
		login, password = parts[0], parts[1]
	}

	if login == "" || password == "" {
		_, err := bot.SendMessage(ctx, &telegramBot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		})

		if err != nil {
			log.Error("Error sending message", "error", err)
			return
		}
		return
	}

	// Save login and password
	user, _, err := that.userStorage.GetOrCreateByTelegramID(ctx, update.Message.From.ID)
	if err != nil {
		log.Error("Error getting or creating user", "error", err)
		return
	}

	user.AuthUsername = login
	user.AuthPassword = password
	if err = that.userStorage.Save(ctx, user); err != nil {
		log.Error("Error saving user", "error", err)
		return
	}

	_, err = bot.SendMessage(ctx, &telegramBot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.",
	})

	if err != nil {
		log.Error("Error sending message", "error", err)
		return
	}
}
